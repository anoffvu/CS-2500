#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 72
(
 #"((lib \"private/editor.rkt\" \"video\") (lib \"private/editor.rkt\" "
 #"\"video\"))\0"
) 0 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1142 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 84
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname lectu"
 #"re17) (read-case-sen"
) 0 0 4 3 255
(
 #"sitive #t) (teachpacks ((lib \"image.rkt\" \"teachpack\" \"2htdp\") "
 #"(lib \"universe.rkt\" \"teachpack\" \"2htdp\"))) (htdp-settings #(#t"
 #" constructor repeating-decimal #f #t none #f ((lib \"image.rkt\" \"t"
 #"eachpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpack\" \"2htdp\")"
 #") #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 16 #";; ANNOUNCEMENTS"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; 1. Homework is due tonight! You should really also start Thursday"
 #"'s homework because"
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";;    it's another iteration of the music player project and might t"
 #"ake some time."
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";; 2. The exam went REALLY well! The average was something like a 97"
 #"%. HOWEVER, please note"
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";;    that the class is going to increase in difficulty so doing wel"
 #"l does NOT mean you can"
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #";;    just slack off for the remainder of the semester."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; As you may recall, last time we were discussing the abstraction o"
 #"f list functions."
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";; We came up with three main activities we want to do with lists:"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; - do-to-all: Do the same thing to every element in a list"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; - keep-if: Keep only the elements of a list that pass a certain t"
 #"est"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";; - collapse: Combine all the elements of a list in some way"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";; That last one is pretty tricky. It's kind of vague what this func"
 #"tion should be doing."
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";; That's actually because it's the most abstract of all of them, so"
 #" it makes sense, but"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; it also means that this is usually the one that trips people up t"
 #"he most. So if you think"
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #";; it's confusing, that's pretty normal actually."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; collapse : (X Y) [List-of X] Y [X Y -> Y] -> Y"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; Repeatedly call the given function on each element of the list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"collapse"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"collapse"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 2 #") "
0 0 21 3 2 #"64"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"collapse"
0 0 24 3 1 #" "
0 0 14 3 3 #"lox"
0 0 24 3 1 #" "
0 0 14 3 9 #"base-case"
0 0 24 3 1 #" "
0 0 14 3 9 #"operation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lox"
0 0 24 3 2 #") "
0 0 14 3 9 #"base-case"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lox"
0 0 24 3 3 #") ("
0 0 14 3 9 #"operation"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lox"
0 0 24 3 3 #") ("
0 0 14 3 8 #"collapse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lox"
0 0 24 3 2 #") "
0 0 14 3 9 #"base-case"
0 0 24 3 1 #" "
0 0 14 3 9 #"operation"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; Let's use this to re-write our specific functions from last time"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; find-sum.v2 : [List-of Number] -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; Find the sum of all the numbers in the list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"find-sum.v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"find-sum.v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON1"
0 0 24 3 2 #") "
0 0 21 3 2 #"21"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"find-sum.v2"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 3 #") ("
0 0 14 3 8 #"collapse"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; find-product.v2 : [List-of Number] -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; Find the product of all the numbers in the list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"find-product.v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"find-product.v2"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON1"
0 0 24 3 2 #") "
0 0 21 3 2 #"64"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"find-product.v2"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 3 #") ("
0 0 14 3 8 #"collapse"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; Let's take another look at the signature for collapse"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; collapse : (X Y) [List-of X] Y [X Y -> Y] -> Y"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";; How did we get here? Well, we know we need a list. It doesn't see"
 #"m to matter what"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; the elements of the list are, as long as we can operate on them w"
 #"ith our function."
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #";; So, we will call this kind of thing X. That gives us"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; (X) [List-of X] ??? ??? -> ???"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";; The second thing and the result have to match, since the second t"
 #"hing is the base"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; case and we return it in the empty case. Does this thing have to "
 #"be the same as X?"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";; Well, in our examples above it does happen to be the same but it "
 #"turns out we can"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; choose anything we like so we will call this thing Y. That gives "
 #"us"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; (X Y) [List-of X] Y ??? -> Y"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";; Now we have to figure out the signature of our input function. We"
 #"ll, it takes the"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; first element of the list which is of type X, and it takes the re"
 #"sult of the"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; recursive call which, since our function's result is of type Y, m"
 #"ust be of type Y."
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; It has to return whatever the result of our function is (Y), so w"
 #"e get"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; (X Y) [List-of X] Y [X Y -> Y] -> Y"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; Okay, let's do some practice with this function."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"LOS0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"LOS1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"world\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; total-length : [List-of String] -> Nat"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; Produces the total length of all the strings in the list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"total-length"
0 0 24 3 1 #" "
0 0 14 3 4 #"LOS0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"total-length"
0 0 24 3 1 #" "
0 0 14 3 4 #"LOS1"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";design a funciton (using collapse) that sums up the length of"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; all the strings in [List-of String]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"LOS-3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"ab\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"abc\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; total-length : [List-of String] -> Nat"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; produces the total length of all the strings in a list"
0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #";; for reference: collapse : (String Number) [List-of String] Number"
 #" [String Number -> Number] -> Y"
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #";  you must make a function for [String Number -> Number] the first "
 #"Number is the running total and"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#"; and the second Number is the str len added to the running total"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"total-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"collapse"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 17 #"add-length-to-num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"total-length"
0 0 24 3 1 #" "
0 0 14 3 5 #"LOS-3"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; add-length-to-num : String Number -> Number"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-length-to-num"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-length-to-num"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-length-to-num"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"abc\""
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 2 #") "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-length-to-num"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 40 #";; add-length-to-num : String Nat -> Nat"
0 0 17 29 1 #"\n"
0 0 17 3 57 #";; Add the length of the given string to the given number"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 17 #"add-length-to-num"
0 0 17 3 1 #" "
0 0 17 3 2 #"\"\""
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 2 #") "
0 0 17 3 2 #"10"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 17 #"add-length-to-num"
0 0 17 3 1 #" "
0 0 17 3 6 #"\"hello"
0 0 17 3 1 #"\""
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"7"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 17 #"add-length-to-num"
0 0 17 3 1 #" "
0 0 17 3 3 #"str"
0 0 17 3 1 #" "
0 0 17 3 3 #"num"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"+"
0 0 17 3 2 #" ("
0 0 17 3 13 #"string-length"
0 0 17 3 1 #" "
0 0 17 3 3 #"str"
0 0 17 3 2 #") "
0 0 17 3 3 #"num"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";; Note that we needed to create a helper function here because we d"
 #"idn't already have"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";; a function that adds a string's length to the sum of the lengths "
 #"so far. We have to"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";; pass in such a function so we had to create one."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";; Okay, collapse is a pretty confusing function due to its totally "
 #"vague purpose and ability"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";; to do basically whatever you want with a list. You can think abou"
 #"t it like this."
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 8 #"collapse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))) "
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Is the same as"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"f"
0 0 24 3 4 #"    "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 4 #"    "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 4 #"    "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; So, all the 'cons' calls became 'f' and the empty list became the"
 #" base case"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; BECCA: Sorry for the weird indentation but I'm trying to show the"
 #" pattern in a readable way."
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;  You should absolutely not use this weird indentation on your hom"
 #"ework."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; design the fucntion add-7-to-all that"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; accepts a [List-of Number] and adds 7 to every number"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";add-7-too-all : [List-of Number] -> [List-of Number]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-7-to-all"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-7-to-all"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; (X Y) [X -> Y] [List-of X] -> [List of Y]"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; (Number Number) [Number -> Number] [List-of Number] -> [List-of Nu"
 #"mber]"
) 0 0 24 29 1 #"\n"
0 9         355 21           0 0           0 58 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-7-to-all"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"add7"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; add7 : Number -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; adds 7 to a number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add7"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add7"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #") "
0 0 21 3 2 #"14"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add7"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; So what happens if we do (collapse LON cons '())? Well, we replac"
 #"e all the 'cons' calls with"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; the function, which is 'cons', so nothing changes there. Then we "
 #"replace the empty list with"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; the base case, which is the empty list, so nothing changes there."
 #" So we just get back the"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";; same list again!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";; BECCA: Here's where we talked about [List-of X] notation. So you'"
 #"re about one or two lectures"
) 0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";; ahead here if you've been reading these notes. But I just didn't "
 #"want you to use the wrong"
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";; notation on your homework ever. You should ALWAYS be using the [L"
 #"ist-of X] notation when"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";; dealing with generic lists."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";; Okay, it seems like we're going to be dealing with a lot of lists"
 #". I don't know about you, but"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; personally I am tired of writing cons a million times in order to"
 #" create these lists. Here's"
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";; some shorthand to help you out:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"MY-LIST"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; This is equivalent to (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 '()"
 #")))))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"MY-OTHER-LIST"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; This is equivalent to (cons \""
0 0 17 3 1 #"a"
0 0 17 3 9 #"\" (cons \""
0 0 17 3 1 #"b"
0 0 17 3 18 #"\" (cons \"c\" '())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";; Note that list and cons are NOT the same and CANNOT be used inter"
 #"changeably. Here's the"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#";; signatures and purpose statements to help you remember this:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; cons : X [List-of X] -> [List-of X]"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Add a SINGLE element to the front of an already existing list"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; list : X X .... -> [List-of X]"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; Create a new list with all the given elements"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; Here's some more examples of using this shorthand"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"EXAMPLE1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 17 3 15 #";; (cons 1 '())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"EXAMPLE2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; (cons 3 (cons \"hello\" (cons (make-posn 0 8) '())))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"EXAMPLE3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; (cons (cons 1 (cons 2 '())) (cons 3 '()))"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; This one's pretty cool. Lists inside of lists! Crazy stuff."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"EXAMPLE4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (cons \"a\" (list 0 #false))"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; See how we can use cons and list together? Because of the signatu"
 #"re of cons"
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";; (it takes an element AND a list) and the signature of list (it pr"
 #"oduces a list)"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #";; we can use them together to create lists."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";; Please be careful when using 'list' because as I said before the "
 #"two functions"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";; are NOT interchangeable and using one when you mean the other can"
 #" have disastrous"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; consequences."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; You no longer have to use 'cons' but keep in mind that this is ju"
 #"st shorthand. Underneath"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";; it all the list is still built with 'cons'."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; BECCA: If you're not confident that you understand the difference"
 #" between 'list' and 'cons',"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";; I recommend using 'cons' because there is RARELY a case where you"
 #" MUST use 'list' and that way"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #";; you don't accidentally use the wrong one."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; Okay, let's talk about list abstractions some more. It turns out "
 #"that ISL comes with some"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";; built-in list abstractions:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; map : (X Y) [X -> Y] [List-of X] -> [List-of Y]"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; Do the same thing to every element of the list (we called this 'd"
 #"o-to-all')"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; filter : (X) [X -> Boolean] [List-of X] -> [List-of X]"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; Remove elements that do not pass the given test (we called this '"
 #"keep-if')"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; foldr : (X Y) [X Y -> Y] Y [List-of X] -> Y"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; Fold the elements of the list together into one result (we called"
 #" this 'collapse')"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; Let's use these to design add-7-to-all which takes a [List-of Num"
 #"ber] and adds 7 to every"
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #";; number in the list. Which abstraction is useful here?"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; We want to do the same thing to every element in the list which i"
 #"s exactly what map does."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; add-7-to-all : [List-of Number] -> [List-of Number]"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; Add 7 to every element of the list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-7-to-all"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 24 3 2 #") "
0 0 14 3 4 #"LON0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-7-to-all"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-7-to-all"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"add-7"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; add-7 : Number -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; Add 7 to the given number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"add-7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"add-7"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"add-7"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; Again, we had to create a helper function because we didn't alrea"
 #"dy have a function that can"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";; do what we want to each element of the list."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";; Let's do another one! Let's design a function that takes a list o"
 #"f numbers and keeps only the"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #";; negative numbers."
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";; Which abstraction should we use? Well, we want to take a list, an"
 #"d REMOVE some elements. That"
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #";; sounds like filter!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Design the function only-negatives that"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; accepts a [List-of Number] and keeps only the negative numbers"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; only-negatives : [List-of Number] -> [List-of Number]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"only-negatives"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 7 #"negativ"
0 0 14 3 1 #"e"
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; (X) [X -> Boolean] [List-of X] -> [List-of X]"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; (Number) [Number -> Boolean] [List-of Number] -> [List-of Number"
0 0 17 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; only-negatives : [List-of Number] -> [List-of Number]"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; Return a list of all the negative numbers in the given list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"only-negatives"
0 0 24 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 24 3 2 #") "
0 0 14 3 4 #"LON0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"only-negatives"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"-7"
0 0 24 3 1 #" "
0 0 14 3 2 #"pi"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 2 #"-7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"only-negatives"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 9 #"negative?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #";; Let's do another one! Let's design a function which takes a list "
 #"of booleans and returns true if"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";; any of them are #true."
0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #";; Which abstraction should we use? Well, our function is returning "
 #"a Boolean, as opposed to a list."
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; We only know one abstraction which can return a non-list thing: f"
 #"oldr."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; (Some people were very clever and looked at their cards and disco"
 #"vered that ormap would also"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; work, but we haven't talked about that one yet so we're going to "
 #"use foldr instead)."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; any-true? : [List-of Boolean] -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Are any of the booleans #true?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"any-true?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"any-true?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"any-true?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lob"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 14 3 15 #"is-either-true?"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #" "
0 0 14 3 3 #"lob"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; You might think we could use 'or' here but it turns out 'or' isn'"
 #"t really a function, it's a"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";; macro. The distinction here is not something we will get into but"
 #" just try using 'or' and"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";; you can see that it breaks."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; is-either-true? : Boolean Boolean -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; Is either Boolean true?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"is-either-true?"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"is-either-true?"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"is-either-true?"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"is-either-true?"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"is-either-true?"
0 0 24 3 1 #" "
0 0 14 3 2 #"b1"
0 0 24 3 1 #" "
0 0 14 3 2 #"b2"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 2 #"b1"
0 0 24 3 1 #" "
0 0 14 3 2 #"b2"
0 0 24 3 2 #"))"
0           0
